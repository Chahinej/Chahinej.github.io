Chapter1 : Introduction

This report presents the design and implementation of a RESTFUL API that retrieves the temperature of a chosen location and uses that temperature to fetch a wardrobe of clothes from a database and suggest the best top and bottom clothes for your outfit.

The API is built using the Flask web framework in Python. It utilizes JSON Web Tokens (JWT) for secure user authentication and authorization. The wardrobe of clothes and user information is stored in a SQLite3 database, which is managed using DataGrip. The API is designed to be user-friendly, with HTML and CSS templates used for the user interface.

During the development process, Visual Studio Code was used as the primary code editor, and Insomnia was used to test the API's efficiency. The API was tested to ensure it could handle a large number of requests and that the data returned was accurate and relevant.

In this report, we will discuss in details the design and implementation of the API. We will begin with an overview of the system architecture and the technologies used. We will then delve into the specific components of the API, including the database design, API routes, and user authentication and authorization. We will also examine the testing and deployment process. Finally, we will conclude with a discussion of the API's performance and future improvements.


Chapter 2 

2.1 JWT Implementation


JSON Web Token (JWT) is an open standard that provides a secure way for authenticating data owners and transmitting information between parties using the JSON format. JWT is sent in the HTTP request with a digital signature. It can be signed using a secret or a public/private key pair.[1]

I used this block of code for setting a configuration value for the Flask application (app) in order to configure JSON Web Tokens (JWT).
Specifically, the app.config dictionary is used to store the configuration values for the application, and the ['JWT_SECRET_KEY'] key is used to configure the secret key used to sign and verify JWT tokens.

The value being set is the string 'Web*Services1', this string is used as a secret key, and is used to encrypt the JWT tokens. The JWT tokens are signed by this key which ensures the authenticity of the token and that it has not been tampered with.
{tokencapture.png}
{tokencapture2.png}



2.3 HTML / CSS Implementation
HTML (the Hypertext Markup Language) and CSS (Cascading Style Sheets) are two of the core technologies for building Web pages. HTML provides the structure of the page, CSS the (visual and aural) layout, for a variety of devices. [2]


I used HTML, CSS scripts for the interactive web pages including : Login_Form, Register_Form and the Main web page.

2.4 HTTP Methods


2.4.1 GET Requests


GET /wardrobe
 
First, it retrieves all the data from the wardrobe table in the database. Then creates a list of dictionaries, each containing the data of a row from the wardrobe table, with keys id, Article, Color, Size, Material, Season, Body_Part that correspond to the columns in the table.
{GET wardrobe.png}

GET /wardrobe/<int:id>

I used this HTTP request to get only one article by its ID
{GET wardrobe by ID.png}


GET /Users

Get the list of all registred users
{GET Users.png}

GET Protected

This ensures that only authorized requests will be passed to the function, The function then retrieves the identity of the current user from the JWT token and sends it back to the client as a JSON response 
{GET Protected.png}


GET /login

Generate a JWT authentication token.
{GET Access Token.png}



2.4.2 POST Requests


POST /wardrobe 
Adding a new article of clothing and specifying its Color, Size, Material, Season, Body part, and the interval of temperature. It accepts the required data from the client in a POST request and uses it to insert a new row in the wardrobe table.
{POST wardrobe.png}

POST /register 

At first, the function connects to the database, creates a cursor object, and extracts the form data from the request body. It then checks if the provided username, email, or full name already exists in the database. If any of them already exists, the function will return a JSON response indicating that the value is already in use, and a status code of 400 (Bad Request). If the user data is valid,  it will hash the password using the pbkdf2_sha256.hash function, which is using a salted and hashed version of the password for security purposes. Then, it inserts the user data into the User_Data table in the database and commits the transaction. Finally, it returns a message indicating that the user was created successfully along with the user id.
{POST Register.png}

POST /logout

This route provides a way for the user to log out of the application by clearing the 'access_token' cookie, this will prevent the user from accessing protected routes, and invalidate the JWT token.
{POST Logout.png}



POST /my_outfit

The main objective of this code block is to retrieve a suitable outfit based on the temperature of the entered city and display them to the user by rendering the my_outfit.html
When a client sends a POST request to the '/my_outfit' endpoint with the "city" as a form data, it will use the OpenWeatherMap API to fetch the current temperature for the given city. After that, it will connect to the local database and using the cursor object, it will execute 2 SQL SELECT statements. The first statement will retrieve top clothes from the wardrobe table that match the current temperature and the second statement will retrieve bottom clothes from the wardrobe table that match the current temperature.
Finally, the function returns a HTML template 'my_outfit.html' along with the temperature, top clothes and bottom clothes, and city name. This HTML template will show the retrieved top and bottom clothes that match the current temperature.
{POST myoutfit.png}


2.4.3 PUT Method 

PUT /wardrobe

Updating an existing article of clothing in the wardrobe table in the database by extracting the form data and assigning new variables with new values.
{PUT wardrobe}


2.4.4 DELETE Method

DELETE /mywardrobe/<int:id>

Deleting an Article by providing its correspondant id 
{DELETE Article.png}




2.5 DataGrip Implementation

DataGrip by JetBrains is an IDE for databases. It is designed to work with databases installed locally, on a server, or in the cloud.[3]
I used DataGrip as a management tool for Sqlite3 to help me to write, test and maintain the SQL statements and keep track of the changes to the database schema and data.
{DataGrip Configuration}



2.6 Database Structure
The database consists of 2 tables with no relations between them.

2.6.1 Tables

Table "wardrobe"

Containing 9 columns : 
	
	1.id (Primary Key) : ID of the article of type Integer.
	2.Article : Name of the article of type Text.
	3.Color : Article's color of type Text.
	4.Size : Article's size of type Text.
	5.Material : Of what material the Article is made of type Text.
	6.Season : In what season you can wear the Article of type Text.
	7.Body_Part : To which body part the Article belongs of type Text.
	8.min_temp : Minimum temperature to wear the Article of type Float.
	9.max_temp : Maximum temperature to wear the Article of type Float.
	{Wardrobe Table.png}


Table "User_Data"
Containing 3 columns : 

	1.User_Id (Primary Key) : The ID of the user of type Integer.
	2.Full_Name: User's full name of type Text.
	3.Username : User's username of type Text.
	4.Email : User's email of type Text.
	5.Password : User's HASHED password of type Text.
	
	{Users table.png}
	
	























References :
[1] : https://cloudentity.com/developers/basics/tokens/json-web-tokens/
[2]: https://www.w3.org/standards/webdesign/htmlcss.html#:~:text=HTML%20(the%20Hypertext%20Markup%20Language,for%20a%20variety%20of%20devices.
[3] : https://docs.starburst.io/data-consumer/clients/datagrip.html#:~:text=DataGrip%20by%20JetBrains%20is%20an,DataGrip%20to%20access%20Starburst%20Enterprise.